/*
3gpp-as-session-with-qos

API for setting us an AS session with required QoS. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assessionwithqos

import (
	"encoding/json"
)

// AsSessionWithQoSSubscriptionPatch struct for AsSessionWithQoSSubscriptionPatch
type AsSessionWithQoSSubscriptionPatch struct {
	// Describe the data flow which requires QoS.
	FlowInfo *[]FlowInfo `json:"flowInfo,omitempty"`
	// Identifies Ethernet packet flows.
	EthFlowInfo *[]EthFlowDescription `json:"ethFlowInfo,omitempty"`
	// Pre-defined QoS reference
	QosReference *string `json:"qosReference,omitempty"`
	// Identifies an ordered list of pre-defined QoS information. The lower the index of the array for a given entry, the higher the priority.
	AltQoSReferences *[]string `json:"altQoSReferences,omitempty"`
	DisUeNotif *bool `json:"disUeNotif,omitempty"`
	UsageThreshold NullableUsageThresholdRm `json:"usageThreshold,omitempty"`
	QosMonInfo *QosMonitoringInformationRm `json:"qosMonInfo,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AsSessionWithQoSSubscriptionPatch AsSessionWithQoSSubscriptionPatch

// NewAsSessionWithQoSSubscriptionPatch instantiates a new AsSessionWithQoSSubscriptionPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsSessionWithQoSSubscriptionPatch() *AsSessionWithQoSSubscriptionPatch {
	this := AsSessionWithQoSSubscriptionPatch{}
	return &this
}

// NewAsSessionWithQoSSubscriptionPatchWithDefaults instantiates a new AsSessionWithQoSSubscriptionPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAsSessionWithQoSSubscriptionPatchWithDefaults() *AsSessionWithQoSSubscriptionPatch {
	this := AsSessionWithQoSSubscriptionPatch{}
	return &this
}

// GetFlowInfo returns the FlowInfo field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscriptionPatch) GetFlowInfo() []FlowInfo {
	if o == nil || o.FlowInfo == nil {
		var ret []FlowInfo
		return ret
	}
	return *o.FlowInfo
}

// GetFlowInfoOk returns a tuple with the FlowInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscriptionPatch) GetFlowInfoOk() (*[]FlowInfo, bool) {
	if o == nil || o.FlowInfo == nil {
		return nil, false
	}
	return o.FlowInfo, true
}

// HasFlowInfo returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscriptionPatch) HasFlowInfo() bool {
	if o != nil && o.FlowInfo != nil {
		return true
	}

	return false
}

// SetFlowInfo gets a reference to the given []FlowInfo and assigns it to the FlowInfo field.
func (o *AsSessionWithQoSSubscriptionPatch) SetFlowInfo(v []FlowInfo) {
	o.FlowInfo = &v
}

// GetEthFlowInfo returns the EthFlowInfo field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscriptionPatch) GetEthFlowInfo() []EthFlowDescription {
	if o == nil || o.EthFlowInfo == nil {
		var ret []EthFlowDescription
		return ret
	}
	return *o.EthFlowInfo
}

// GetEthFlowInfoOk returns a tuple with the EthFlowInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscriptionPatch) GetEthFlowInfoOk() (*[]EthFlowDescription, bool) {
	if o == nil || o.EthFlowInfo == nil {
		return nil, false
	}
	return o.EthFlowInfo, true
}

// HasEthFlowInfo returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscriptionPatch) HasEthFlowInfo() bool {
	if o != nil && o.EthFlowInfo != nil {
		return true
	}

	return false
}

// SetEthFlowInfo gets a reference to the given []EthFlowDescription and assigns it to the EthFlowInfo field.
func (o *AsSessionWithQoSSubscriptionPatch) SetEthFlowInfo(v []EthFlowDescription) {
	o.EthFlowInfo = &v
}

// GetQosReference returns the QosReference field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscriptionPatch) GetQosReference() string {
	if o == nil || o.QosReference == nil {
		var ret string
		return ret
	}
	return *o.QosReference
}

// GetQosReferenceOk returns a tuple with the QosReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscriptionPatch) GetQosReferenceOk() (*string, bool) {
	if o == nil || o.QosReference == nil {
		return nil, false
	}
	return o.QosReference, true
}

// HasQosReference returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscriptionPatch) HasQosReference() bool {
	if o != nil && o.QosReference != nil {
		return true
	}

	return false
}

// SetQosReference gets a reference to the given string and assigns it to the QosReference field.
func (o *AsSessionWithQoSSubscriptionPatch) SetQosReference(v string) {
	o.QosReference = &v
}

// GetAltQoSReferences returns the AltQoSReferences field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscriptionPatch) GetAltQoSReferences() []string {
	if o == nil || o.AltQoSReferences == nil {
		var ret []string
		return ret
	}
	return *o.AltQoSReferences
}

// GetAltQoSReferencesOk returns a tuple with the AltQoSReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscriptionPatch) GetAltQoSReferencesOk() (*[]string, bool) {
	if o == nil || o.AltQoSReferences == nil {
		return nil, false
	}
	return o.AltQoSReferences, true
}

// HasAltQoSReferences returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscriptionPatch) HasAltQoSReferences() bool {
	if o != nil && o.AltQoSReferences != nil {
		return true
	}

	return false
}

// SetAltQoSReferences gets a reference to the given []string and assigns it to the AltQoSReferences field.
func (o *AsSessionWithQoSSubscriptionPatch) SetAltQoSReferences(v []string) {
	o.AltQoSReferences = &v
}

// GetDisUeNotif returns the DisUeNotif field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscriptionPatch) GetDisUeNotif() bool {
	if o == nil || o.DisUeNotif == nil {
		var ret bool
		return ret
	}
	return *o.DisUeNotif
}

// GetDisUeNotifOk returns a tuple with the DisUeNotif field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscriptionPatch) GetDisUeNotifOk() (*bool, bool) {
	if o == nil || o.DisUeNotif == nil {
		return nil, false
	}
	return o.DisUeNotif, true
}

// HasDisUeNotif returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscriptionPatch) HasDisUeNotif() bool {
	if o != nil && o.DisUeNotif != nil {
		return true
	}

	return false
}

// SetDisUeNotif gets a reference to the given bool and assigns it to the DisUeNotif field.
func (o *AsSessionWithQoSSubscriptionPatch) SetDisUeNotif(v bool) {
	o.DisUeNotif = &v
}

// GetUsageThreshold returns the UsageThreshold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AsSessionWithQoSSubscriptionPatch) GetUsageThreshold() UsageThresholdRm {
	if o == nil || o.UsageThreshold.Get() == nil {
		var ret UsageThresholdRm
		return ret
	}
	return *o.UsageThreshold.Get()
}

// GetUsageThresholdOk returns a tuple with the UsageThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AsSessionWithQoSSubscriptionPatch) GetUsageThresholdOk() (*UsageThresholdRm, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UsageThreshold.Get(), o.UsageThreshold.IsSet()
}

// HasUsageThreshold returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscriptionPatch) HasUsageThreshold() bool {
	if o != nil && o.UsageThreshold.IsSet() {
		return true
	}

	return false
}

// SetUsageThreshold gets a reference to the given NullableUsageThresholdRm and assigns it to the UsageThreshold field.
func (o *AsSessionWithQoSSubscriptionPatch) SetUsageThreshold(v UsageThresholdRm) {
	o.UsageThreshold.Set(&v)
}
// SetUsageThresholdNil sets the value for UsageThreshold to be an explicit nil
func (o *AsSessionWithQoSSubscriptionPatch) SetUsageThresholdNil() {
	o.UsageThreshold.Set(nil)
}

// UnsetUsageThreshold ensures that no value is present for UsageThreshold, not even an explicit nil
func (o *AsSessionWithQoSSubscriptionPatch) UnsetUsageThreshold() {
	o.UsageThreshold.Unset()
}

// GetQosMonInfo returns the QosMonInfo field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscriptionPatch) GetQosMonInfo() QosMonitoringInformationRm {
	if o == nil || o.QosMonInfo == nil {
		var ret QosMonitoringInformationRm
		return ret
	}
	return *o.QosMonInfo
}

// GetQosMonInfoOk returns a tuple with the QosMonInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscriptionPatch) GetQosMonInfoOk() (*QosMonitoringInformationRm, bool) {
	if o == nil || o.QosMonInfo == nil {
		return nil, false
	}
	return o.QosMonInfo, true
}

// HasQosMonInfo returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscriptionPatch) HasQosMonInfo() bool {
	if o != nil && o.QosMonInfo != nil {
		return true
	}

	return false
}

// SetQosMonInfo gets a reference to the given QosMonitoringInformationRm and assigns it to the QosMonInfo field.
func (o *AsSessionWithQoSSubscriptionPatch) SetQosMonInfo(v QosMonitoringInformationRm) {
	o.QosMonInfo = &v
}

func (o AsSessionWithQoSSubscriptionPatch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FlowInfo != nil {
		toSerialize["flowInfo"] = o.FlowInfo
	}
	if o.EthFlowInfo != nil {
		toSerialize["ethFlowInfo"] = o.EthFlowInfo
	}
	if o.QosReference != nil {
		toSerialize["qosReference"] = o.QosReference
	}
	if o.AltQoSReferences != nil {
		toSerialize["altQoSReferences"] = o.AltQoSReferences
	}
	if o.DisUeNotif != nil {
		toSerialize["disUeNotif"] = o.DisUeNotif
	}
	if o.UsageThreshold.IsSet() {
		toSerialize["usageThreshold"] = o.UsageThreshold.Get()
	}
	if o.QosMonInfo != nil {
		toSerialize["qosMonInfo"] = o.QosMonInfo
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AsSessionWithQoSSubscriptionPatch) UnmarshalJSON(bytes []byte) (err error) {
	varAsSessionWithQoSSubscriptionPatch := _AsSessionWithQoSSubscriptionPatch{}

	if err = json.Unmarshal(bytes, &varAsSessionWithQoSSubscriptionPatch); err == nil {
		*o = AsSessionWithQoSSubscriptionPatch(varAsSessionWithQoSSubscriptionPatch)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "flowInfo")
		delete(additionalProperties, "ethFlowInfo")
		delete(additionalProperties, "qosReference")
		delete(additionalProperties, "altQoSReferences")
		delete(additionalProperties, "disUeNotif")
		delete(additionalProperties, "usageThreshold")
		delete(additionalProperties, "qosMonInfo")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAsSessionWithQoSSubscriptionPatch struct {
	value *AsSessionWithQoSSubscriptionPatch
	isSet bool
}

func (v NullableAsSessionWithQoSSubscriptionPatch) Get() *AsSessionWithQoSSubscriptionPatch {
	return v.value
}

func (v *NullableAsSessionWithQoSSubscriptionPatch) Set(val *AsSessionWithQoSSubscriptionPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableAsSessionWithQoSSubscriptionPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableAsSessionWithQoSSubscriptionPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsSessionWithQoSSubscriptionPatch(val *AsSessionWithQoSSubscriptionPatch) *NullableAsSessionWithQoSSubscriptionPatch {
	return &NullableAsSessionWithQoSSubscriptionPatch{value: val, isSet: true}
}

func (v NullableAsSessionWithQoSSubscriptionPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsSessionWithQoSSubscriptionPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


