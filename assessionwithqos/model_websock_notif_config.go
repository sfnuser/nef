/*
3gpp-as-session-with-qos

API for setting us an AS session with required QoS. © 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assessionwithqos

import (
	"encoding/json"
)

// WebsockNotifConfig struct for WebsockNotifConfig
type WebsockNotifConfig struct {
	// string formatted according to IETF RFC 3986 identifying a referenced resource.
	WebsocketUri *string `json:"websocketUri,omitempty"`
	// Set by the SCS/AS to indicate that the Websocket delivery is requested.
	RequestWebsocketUri *bool `json:"requestWebsocketUri,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WebsockNotifConfig WebsockNotifConfig

// NewWebsockNotifConfig instantiates a new WebsockNotifConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebsockNotifConfig() *WebsockNotifConfig {
	this := WebsockNotifConfig{}
	return &this
}

// NewWebsockNotifConfigWithDefaults instantiates a new WebsockNotifConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebsockNotifConfigWithDefaults() *WebsockNotifConfig {
	this := WebsockNotifConfig{}
	return &this
}

// GetWebsocketUri returns the WebsocketUri field value if set, zero value otherwise.
func (o *WebsockNotifConfig) GetWebsocketUri() string {
	if o == nil || o.WebsocketUri == nil {
		var ret string
		return ret
	}
	return *o.WebsocketUri
}

// GetWebsocketUriOk returns a tuple with the WebsocketUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsockNotifConfig) GetWebsocketUriOk() (*string, bool) {
	if o == nil || o.WebsocketUri == nil {
		return nil, false
	}
	return o.WebsocketUri, true
}

// HasWebsocketUri returns a boolean if a field has been set.
func (o *WebsockNotifConfig) HasWebsocketUri() bool {
	if o != nil && o.WebsocketUri != nil {
		return true
	}

	return false
}

// SetWebsocketUri gets a reference to the given string and assigns it to the WebsocketUri field.
func (o *WebsockNotifConfig) SetWebsocketUri(v string) {
	o.WebsocketUri = &v
}

// GetRequestWebsocketUri returns the RequestWebsocketUri field value if set, zero value otherwise.
func (o *WebsockNotifConfig) GetRequestWebsocketUri() bool {
	if o == nil || o.RequestWebsocketUri == nil {
		var ret bool
		return ret
	}
	return *o.RequestWebsocketUri
}

// GetRequestWebsocketUriOk returns a tuple with the RequestWebsocketUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsockNotifConfig) GetRequestWebsocketUriOk() (*bool, bool) {
	if o == nil || o.RequestWebsocketUri == nil {
		return nil, false
	}
	return o.RequestWebsocketUri, true
}

// HasRequestWebsocketUri returns a boolean if a field has been set.
func (o *WebsockNotifConfig) HasRequestWebsocketUri() bool {
	if o != nil && o.RequestWebsocketUri != nil {
		return true
	}

	return false
}

// SetRequestWebsocketUri gets a reference to the given bool and assigns it to the RequestWebsocketUri field.
func (o *WebsockNotifConfig) SetRequestWebsocketUri(v bool) {
	o.RequestWebsocketUri = &v
}

func (o WebsockNotifConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.WebsocketUri != nil {
		toSerialize["websocketUri"] = o.WebsocketUri
	}
	if o.RequestWebsocketUri != nil {
		toSerialize["requestWebsocketUri"] = o.RequestWebsocketUri
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *WebsockNotifConfig) UnmarshalJSON(bytes []byte) (err error) {
	varWebsockNotifConfig := _WebsockNotifConfig{}

	if err = json.Unmarshal(bytes, &varWebsockNotifConfig); err == nil {
		*o = WebsockNotifConfig(varWebsockNotifConfig)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "websocketUri")
		delete(additionalProperties, "requestWebsocketUri")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWebsockNotifConfig struct {
	value *WebsockNotifConfig
	isSet bool
}

func (v NullableWebsockNotifConfig) Get() *WebsockNotifConfig {
	return v.value
}

func (v *NullableWebsockNotifConfig) Set(val *WebsockNotifConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableWebsockNotifConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableWebsockNotifConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebsockNotifConfig(val *WebsockNotifConfig) *NullableWebsockNotifConfig {
	return &NullableWebsockNotifConfig{value: val, isSet: true}
}

func (v NullableWebsockNotifConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebsockNotifConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


