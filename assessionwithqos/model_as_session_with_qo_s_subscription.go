/*
3gpp-as-session-with-qos

API for setting us an AS session with required QoS. © 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package assessionwithqos

import (
	"encoding/json"
)

// AsSessionWithQoSSubscription struct for AsSessionWithQoSSubscription
type AsSessionWithQoSSubscription struct {
	// string formatted according to IETF RFC 3986 identifying a referenced resource.
	Self *string `json:"self,omitempty"`
	SupportedFeatures *string `json:"supportedFeatures,omitempty"`
	// string formatted according to IETF RFC 3986 identifying a referenced resource.
	NotificationDestination string `json:"notificationDestination"`
	// Describe the data flow which requires QoS.
	FlowInfo *[]FlowInfo `json:"flowInfo,omitempty"`
	// Identifies Ethernet packet flows.
	EthFlowInfo *[]EthFlowDescription `json:"ethFlowInfo,omitempty"`
	// Identifies a pre-defined QoS information
	QosReference *string `json:"qosReference,omitempty"`
	// Identifies an ordered list of pre-defined QoS information. The lower the index of the array for a given entry, the higher the priority.
	AltQoSReferences *[]string `json:"altQoSReferences,omitempty"`
	DisUeNotif *bool `json:"disUeNotif,omitempty"`
	// string identifying a Ipv4 address formatted in the \"dotted decimal\" notation as defined in IETF RFC 1166.
	UeIpv4Addr *string `json:"ueIpv4Addr,omitempty"`
	IpDomain *string `json:"ipDomain,omitempty"`
	// string identifying a Ipv6 address formatted according to clause 4 in IETF RFC 5952. The mixed Ipv4 Ipv6 notation according to clause 5 of IETF RFC 5952 shall not be used.
	UeIpv6Addr *string `json:"ueIpv6Addr,omitempty"`
	MacAddr *string `json:"macAddr,omitempty"`
	UsageThreshold *UsageThreshold `json:"usageThreshold,omitempty"`
	SponsorInfo *SponsorInformation `json:"sponsorInfo,omitempty"`
	QosMonInfo *QosMonitoringInformation `json:"qosMonInfo,omitempty"`
	// Set to true by the SCS/AS to request the SCEF to send a test notification as defined in subclause 5.2.5.3. Set to false or omitted otherwise.
	RequestTestNotification *bool `json:"requestTestNotification,omitempty"`
	WebsockNotifConfig *WebsockNotifConfig `json:"websockNotifConfig,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AsSessionWithQoSSubscription AsSessionWithQoSSubscription

// NewAsSessionWithQoSSubscription instantiates a new AsSessionWithQoSSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsSessionWithQoSSubscription(notificationDestination string) *AsSessionWithQoSSubscription {
	this := AsSessionWithQoSSubscription{}
	this.NotificationDestination = notificationDestination
	return &this
}

// NewAsSessionWithQoSSubscriptionWithDefaults instantiates a new AsSessionWithQoSSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAsSessionWithQoSSubscriptionWithDefaults() *AsSessionWithQoSSubscription {
	this := AsSessionWithQoSSubscription{}
	return &this
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetSelf() string {
	if o == nil || o.Self == nil {
		var ret string
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetSelfOk() (*string, bool) {
	if o == nil || o.Self == nil {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasSelf() bool {
	if o != nil && o.Self != nil {
		return true
	}

	return false
}

// SetSelf gets a reference to the given string and assigns it to the Self field.
func (o *AsSessionWithQoSSubscription) SetSelf(v string) {
	o.Self = &v
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetSupportedFeatures() string {
	if o == nil || o.SupportedFeatures == nil {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || o.SupportedFeatures == nil {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasSupportedFeatures() bool {
	if o != nil && o.SupportedFeatures != nil {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *AsSessionWithQoSSubscription) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

// GetNotificationDestination returns the NotificationDestination field value
func (o *AsSessionWithQoSSubscription) GetNotificationDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotificationDestination
}

// GetNotificationDestinationOk returns a tuple with the NotificationDestination field value
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetNotificationDestinationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NotificationDestination, true
}

// SetNotificationDestination sets field value
func (o *AsSessionWithQoSSubscription) SetNotificationDestination(v string) {
	o.NotificationDestination = v
}

// GetFlowInfo returns the FlowInfo field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetFlowInfo() []FlowInfo {
	if o == nil || o.FlowInfo == nil {
		var ret []FlowInfo
		return ret
	}
	return *o.FlowInfo
}

// GetFlowInfoOk returns a tuple with the FlowInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetFlowInfoOk() (*[]FlowInfo, bool) {
	if o == nil || o.FlowInfo == nil {
		return nil, false
	}
	return o.FlowInfo, true
}

// HasFlowInfo returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasFlowInfo() bool {
	if o != nil && o.FlowInfo != nil {
		return true
	}

	return false
}

// SetFlowInfo gets a reference to the given []FlowInfo and assigns it to the FlowInfo field.
func (o *AsSessionWithQoSSubscription) SetFlowInfo(v []FlowInfo) {
	o.FlowInfo = &v
}

// GetEthFlowInfo returns the EthFlowInfo field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetEthFlowInfo() []EthFlowDescription {
	if o == nil || o.EthFlowInfo == nil {
		var ret []EthFlowDescription
		return ret
	}
	return *o.EthFlowInfo
}

// GetEthFlowInfoOk returns a tuple with the EthFlowInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetEthFlowInfoOk() (*[]EthFlowDescription, bool) {
	if o == nil || o.EthFlowInfo == nil {
		return nil, false
	}
	return o.EthFlowInfo, true
}

// HasEthFlowInfo returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasEthFlowInfo() bool {
	if o != nil && o.EthFlowInfo != nil {
		return true
	}

	return false
}

// SetEthFlowInfo gets a reference to the given []EthFlowDescription and assigns it to the EthFlowInfo field.
func (o *AsSessionWithQoSSubscription) SetEthFlowInfo(v []EthFlowDescription) {
	o.EthFlowInfo = &v
}

// GetQosReference returns the QosReference field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetQosReference() string {
	if o == nil || o.QosReference == nil {
		var ret string
		return ret
	}
	return *o.QosReference
}

// GetQosReferenceOk returns a tuple with the QosReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetQosReferenceOk() (*string, bool) {
	if o == nil || o.QosReference == nil {
		return nil, false
	}
	return o.QosReference, true
}

// HasQosReference returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasQosReference() bool {
	if o != nil && o.QosReference != nil {
		return true
	}

	return false
}

// SetQosReference gets a reference to the given string and assigns it to the QosReference field.
func (o *AsSessionWithQoSSubscription) SetQosReference(v string) {
	o.QosReference = &v
}

// GetAltQoSReferences returns the AltQoSReferences field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetAltQoSReferences() []string {
	if o == nil || o.AltQoSReferences == nil {
		var ret []string
		return ret
	}
	return *o.AltQoSReferences
}

// GetAltQoSReferencesOk returns a tuple with the AltQoSReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetAltQoSReferencesOk() (*[]string, bool) {
	if o == nil || o.AltQoSReferences == nil {
		return nil, false
	}
	return o.AltQoSReferences, true
}

// HasAltQoSReferences returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasAltQoSReferences() bool {
	if o != nil && o.AltQoSReferences != nil {
		return true
	}

	return false
}

// SetAltQoSReferences gets a reference to the given []string and assigns it to the AltQoSReferences field.
func (o *AsSessionWithQoSSubscription) SetAltQoSReferences(v []string) {
	o.AltQoSReferences = &v
}

// GetDisUeNotif returns the DisUeNotif field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetDisUeNotif() bool {
	if o == nil || o.DisUeNotif == nil {
		var ret bool
		return ret
	}
	return *o.DisUeNotif
}

// GetDisUeNotifOk returns a tuple with the DisUeNotif field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetDisUeNotifOk() (*bool, bool) {
	if o == nil || o.DisUeNotif == nil {
		return nil, false
	}
	return o.DisUeNotif, true
}

// HasDisUeNotif returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasDisUeNotif() bool {
	if o != nil && o.DisUeNotif != nil {
		return true
	}

	return false
}

// SetDisUeNotif gets a reference to the given bool and assigns it to the DisUeNotif field.
func (o *AsSessionWithQoSSubscription) SetDisUeNotif(v bool) {
	o.DisUeNotif = &v
}

// GetUeIpv4Addr returns the UeIpv4Addr field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetUeIpv4Addr() string {
	if o == nil || o.UeIpv4Addr == nil {
		var ret string
		return ret
	}
	return *o.UeIpv4Addr
}

// GetUeIpv4AddrOk returns a tuple with the UeIpv4Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetUeIpv4AddrOk() (*string, bool) {
	if o == nil || o.UeIpv4Addr == nil {
		return nil, false
	}
	return o.UeIpv4Addr, true
}

// HasUeIpv4Addr returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasUeIpv4Addr() bool {
	if o != nil && o.UeIpv4Addr != nil {
		return true
	}

	return false
}

// SetUeIpv4Addr gets a reference to the given string and assigns it to the UeIpv4Addr field.
func (o *AsSessionWithQoSSubscription) SetUeIpv4Addr(v string) {
	o.UeIpv4Addr = &v
}

// GetIpDomain returns the IpDomain field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetIpDomain() string {
	if o == nil || o.IpDomain == nil {
		var ret string
		return ret
	}
	return *o.IpDomain
}

// GetIpDomainOk returns a tuple with the IpDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetIpDomainOk() (*string, bool) {
	if o == nil || o.IpDomain == nil {
		return nil, false
	}
	return o.IpDomain, true
}

// HasIpDomain returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasIpDomain() bool {
	if o != nil && o.IpDomain != nil {
		return true
	}

	return false
}

// SetIpDomain gets a reference to the given string and assigns it to the IpDomain field.
func (o *AsSessionWithQoSSubscription) SetIpDomain(v string) {
	o.IpDomain = &v
}

// GetUeIpv6Addr returns the UeIpv6Addr field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetUeIpv6Addr() string {
	if o == nil || o.UeIpv6Addr == nil {
		var ret string
		return ret
	}
	return *o.UeIpv6Addr
}

// GetUeIpv6AddrOk returns a tuple with the UeIpv6Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetUeIpv6AddrOk() (*string, bool) {
	if o == nil || o.UeIpv6Addr == nil {
		return nil, false
	}
	return o.UeIpv6Addr, true
}

// HasUeIpv6Addr returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasUeIpv6Addr() bool {
	if o != nil && o.UeIpv6Addr != nil {
		return true
	}

	return false
}

// SetUeIpv6Addr gets a reference to the given string and assigns it to the UeIpv6Addr field.
func (o *AsSessionWithQoSSubscription) SetUeIpv6Addr(v string) {
	o.UeIpv6Addr = &v
}

// GetMacAddr returns the MacAddr field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetMacAddr() string {
	if o == nil || o.MacAddr == nil {
		var ret string
		return ret
	}
	return *o.MacAddr
}

// GetMacAddrOk returns a tuple with the MacAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetMacAddrOk() (*string, bool) {
	if o == nil || o.MacAddr == nil {
		return nil, false
	}
	return o.MacAddr, true
}

// HasMacAddr returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasMacAddr() bool {
	if o != nil && o.MacAddr != nil {
		return true
	}

	return false
}

// SetMacAddr gets a reference to the given string and assigns it to the MacAddr field.
func (o *AsSessionWithQoSSubscription) SetMacAddr(v string) {
	o.MacAddr = &v
}

// GetUsageThreshold returns the UsageThreshold field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetUsageThreshold() UsageThreshold {
	if o == nil || o.UsageThreshold == nil {
		var ret UsageThreshold
		return ret
	}
	return *o.UsageThreshold
}

// GetUsageThresholdOk returns a tuple with the UsageThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetUsageThresholdOk() (*UsageThreshold, bool) {
	if o == nil || o.UsageThreshold == nil {
		return nil, false
	}
	return o.UsageThreshold, true
}

// HasUsageThreshold returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasUsageThreshold() bool {
	if o != nil && o.UsageThreshold != nil {
		return true
	}

	return false
}

// SetUsageThreshold gets a reference to the given UsageThreshold and assigns it to the UsageThreshold field.
func (o *AsSessionWithQoSSubscription) SetUsageThreshold(v UsageThreshold) {
	o.UsageThreshold = &v
}

// GetSponsorInfo returns the SponsorInfo field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetSponsorInfo() SponsorInformation {
	if o == nil || o.SponsorInfo == nil {
		var ret SponsorInformation
		return ret
	}
	return *o.SponsorInfo
}

// GetSponsorInfoOk returns a tuple with the SponsorInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetSponsorInfoOk() (*SponsorInformation, bool) {
	if o == nil || o.SponsorInfo == nil {
		return nil, false
	}
	return o.SponsorInfo, true
}

// HasSponsorInfo returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasSponsorInfo() bool {
	if o != nil && o.SponsorInfo != nil {
		return true
	}

	return false
}

// SetSponsorInfo gets a reference to the given SponsorInformation and assigns it to the SponsorInfo field.
func (o *AsSessionWithQoSSubscription) SetSponsorInfo(v SponsorInformation) {
	o.SponsorInfo = &v
}

// GetQosMonInfo returns the QosMonInfo field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetQosMonInfo() QosMonitoringInformation {
	if o == nil || o.QosMonInfo == nil {
		var ret QosMonitoringInformation
		return ret
	}
	return *o.QosMonInfo
}

// GetQosMonInfoOk returns a tuple with the QosMonInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetQosMonInfoOk() (*QosMonitoringInformation, bool) {
	if o == nil || o.QosMonInfo == nil {
		return nil, false
	}
	return o.QosMonInfo, true
}

// HasQosMonInfo returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasQosMonInfo() bool {
	if o != nil && o.QosMonInfo != nil {
		return true
	}

	return false
}

// SetQosMonInfo gets a reference to the given QosMonitoringInformation and assigns it to the QosMonInfo field.
func (o *AsSessionWithQoSSubscription) SetQosMonInfo(v QosMonitoringInformation) {
	o.QosMonInfo = &v
}

// GetRequestTestNotification returns the RequestTestNotification field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetRequestTestNotification() bool {
	if o == nil || o.RequestTestNotification == nil {
		var ret bool
		return ret
	}
	return *o.RequestTestNotification
}

// GetRequestTestNotificationOk returns a tuple with the RequestTestNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetRequestTestNotificationOk() (*bool, bool) {
	if o == nil || o.RequestTestNotification == nil {
		return nil, false
	}
	return o.RequestTestNotification, true
}

// HasRequestTestNotification returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasRequestTestNotification() bool {
	if o != nil && o.RequestTestNotification != nil {
		return true
	}

	return false
}

// SetRequestTestNotification gets a reference to the given bool and assigns it to the RequestTestNotification field.
func (o *AsSessionWithQoSSubscription) SetRequestTestNotification(v bool) {
	o.RequestTestNotification = &v
}

// GetWebsockNotifConfig returns the WebsockNotifConfig field value if set, zero value otherwise.
func (o *AsSessionWithQoSSubscription) GetWebsockNotifConfig() WebsockNotifConfig {
	if o == nil || o.WebsockNotifConfig == nil {
		var ret WebsockNotifConfig
		return ret
	}
	return *o.WebsockNotifConfig
}

// GetWebsockNotifConfigOk returns a tuple with the WebsockNotifConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsSessionWithQoSSubscription) GetWebsockNotifConfigOk() (*WebsockNotifConfig, bool) {
	if o == nil || o.WebsockNotifConfig == nil {
		return nil, false
	}
	return o.WebsockNotifConfig, true
}

// HasWebsockNotifConfig returns a boolean if a field has been set.
func (o *AsSessionWithQoSSubscription) HasWebsockNotifConfig() bool {
	if o != nil && o.WebsockNotifConfig != nil {
		return true
	}

	return false
}

// SetWebsockNotifConfig gets a reference to the given WebsockNotifConfig and assigns it to the WebsockNotifConfig field.
func (o *AsSessionWithQoSSubscription) SetWebsockNotifConfig(v WebsockNotifConfig) {
	o.WebsockNotifConfig = &v
}

func (o AsSessionWithQoSSubscription) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Self != nil {
		toSerialize["self"] = o.Self
	}
	if o.SupportedFeatures != nil {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	if true {
		toSerialize["notificationDestination"] = o.NotificationDestination
	}
	if o.FlowInfo != nil {
		toSerialize["flowInfo"] = o.FlowInfo
	}
	if o.EthFlowInfo != nil {
		toSerialize["ethFlowInfo"] = o.EthFlowInfo
	}
	if o.QosReference != nil {
		toSerialize["qosReference"] = o.QosReference
	}
	if o.AltQoSReferences != nil {
		toSerialize["altQoSReferences"] = o.AltQoSReferences
	}
	if o.DisUeNotif != nil {
		toSerialize["disUeNotif"] = o.DisUeNotif
	}
	if o.UeIpv4Addr != nil {
		toSerialize["ueIpv4Addr"] = o.UeIpv4Addr
	}
	if o.IpDomain != nil {
		toSerialize["ipDomain"] = o.IpDomain
	}
	if o.UeIpv6Addr != nil {
		toSerialize["ueIpv6Addr"] = o.UeIpv6Addr
	}
	if o.MacAddr != nil {
		toSerialize["macAddr"] = o.MacAddr
	}
	if o.UsageThreshold != nil {
		toSerialize["usageThreshold"] = o.UsageThreshold
	}
	if o.SponsorInfo != nil {
		toSerialize["sponsorInfo"] = o.SponsorInfo
	}
	if o.QosMonInfo != nil {
		toSerialize["qosMonInfo"] = o.QosMonInfo
	}
	if o.RequestTestNotification != nil {
		toSerialize["requestTestNotification"] = o.RequestTestNotification
	}
	if o.WebsockNotifConfig != nil {
		toSerialize["websockNotifConfig"] = o.WebsockNotifConfig
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AsSessionWithQoSSubscription) UnmarshalJSON(bytes []byte) (err error) {
	varAsSessionWithQoSSubscription := _AsSessionWithQoSSubscription{}

	if err = json.Unmarshal(bytes, &varAsSessionWithQoSSubscription); err == nil {
		*o = AsSessionWithQoSSubscription(varAsSessionWithQoSSubscription)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "self")
		delete(additionalProperties, "supportedFeatures")
		delete(additionalProperties, "notificationDestination")
		delete(additionalProperties, "flowInfo")
		delete(additionalProperties, "ethFlowInfo")
		delete(additionalProperties, "qosReference")
		delete(additionalProperties, "altQoSReferences")
		delete(additionalProperties, "disUeNotif")
		delete(additionalProperties, "ueIpv4Addr")
		delete(additionalProperties, "ipDomain")
		delete(additionalProperties, "ueIpv6Addr")
		delete(additionalProperties, "macAddr")
		delete(additionalProperties, "usageThreshold")
		delete(additionalProperties, "sponsorInfo")
		delete(additionalProperties, "qosMonInfo")
		delete(additionalProperties, "requestTestNotification")
		delete(additionalProperties, "websockNotifConfig")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAsSessionWithQoSSubscription struct {
	value *AsSessionWithQoSSubscription
	isSet bool
}

func (v NullableAsSessionWithQoSSubscription) Get() *AsSessionWithQoSSubscription {
	return v.value
}

func (v *NullableAsSessionWithQoSSubscription) Set(val *AsSessionWithQoSSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableAsSessionWithQoSSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableAsSessionWithQoSSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsSessionWithQoSSubscription(val *AsSessionWithQoSSubscription) *NullableAsSessionWithQoSSubscription {
	return &NullableAsSessionWithQoSSubscription{value: val, isSet: true}
}

func (v NullableAsSessionWithQoSSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsSessionWithQoSSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


